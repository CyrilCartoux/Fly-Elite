import { AuthService } from './../auth/auth.service';
import { Flight } from './../interfaces/flight';
import { Injectable } from '@angular/core';
import * as firebase from 'firebase';
import { BehaviorSubject } from 'rxjs';
import { Users } from '../interfaces/user';

@Injectable({
  providedIn: 'root'
})
export class DataStorageService {

  flights: Flight[] = [];
  flightId;
  uid;

  allFlightsFromFirebaseSubject = new BehaviorSubject<Flight[]>(null);
  allKeysOfFlightsFromFirebase = [];

  allFlightKeyOfUser = [];

  constructor(
    private authService: AuthService
  ) {
    this.authService.user.subscribe(
      data => {
        this.uid = data;
      }
    );
  }

  // get all the flights from firebse, stores them in the BehaviorSubject, used by the flight service on app load
  async getFlights() {
    const query = firebase.database().ref('flights');
    await query.on('value', (snapshot) => {
      this.allFlightsFromFirebaseSubject.next(Object.values(snapshot.val()));
      snapshot.forEach(elt => {
        this.allKeysOfFlightsFromFirebase.push(elt.key);
      });
    });
  }

  getKeysOfFlights() {
    return this.allKeysOfFlightsFromFirebase;
  }

  storeFlight(flight: Flight) {
    // get the unique id generated by firebase
    this.flightId = firebase.database().ref('users').child(this.uid).child('flights').push(flight);
    return this.flightId;
  }

  async storeUsers(passengers: Users[], uid, flightUid) {
    await passengers.forEach(passenger => {
      firebase.database()
        .ref('users')
        .child(uid)
        .child('flights')
        .child(flightUid.key)
        .push({
          email: passenger.email,
          nom: passenger.nom,
          prenom: passenger.prenom
        });
      console.log(passenger.nom + ' added');
    });
  }

  async createFlight(form) {
    const departure = form.value.departureTime.toUTCString();
    const landing = form.value.landingTime.toUTCString();
    const datesVol = form.value.dates.toLocaleString();
    await firebase.database().ref('flights').push({
      departure: form.value.departure,
      arrival: form.value.arrival,
      flightNumber: form.value.flightNumber,
      departureTime: departure,
      landingTime: landing,
      dates: datesVol,
      company: form.value.company,
      noEscale: form.value.noEscale
    });
  }

  deleteAllFlightsOfUser(uid) {
    firebase.database().ref('users').child(uid).child('flights').remove().then(() => {
      console.log('deleted');
    });
  }

  async editFlight(key, form) {
    const departure = form.value.departureTime.toUTCString();
    const landing = form.value.landingTime.toUTCString();
    const datesVol = form.value.dates.toLocaleString();
    await firebase.database().ref('flights').child(key).update({
      departure: form.value.departure,
      arrival: form.value.arrival,
      flightNumber: form.value.flightNumber,
      departureTime: departure,
      landingTime: landing,
      dates: datesVol,
      company: form.value.company,
      noEscale: form.value.noEscale
    });
    console.log(key + ' is updated');
  }

  async editFlightOfUser(index, form) {
    const departure = form.value.departure;
    const arrival = form.value.arrival;
    const category = form.value.category.name;
    const noEscale = form.value.noEscale;
    const datesVol = form.value.dates.toLocaleString();
    await firebase.database().ref('users').child(this.uid).child('flights').on('value', (snapshot) => {
      snapshot.forEach(elt => {
        this.allFlightKeyOfUser.push(elt.key);
      });
    });
    const key = this.allFlightKeyOfUser[index];
    await firebase.database().ref('users').child(this.uid).child('flights').child(key).update({
      departure: departure,
      arrival: arrival,
      category: category,
      noEscale: noEscale,
      dates: datesVol
    })
  }

  async getUserInfos(uid) {
    let email;
    let nom;
    let prenom;
    console.log(uid),
      await firebase.database().ref('users').child(uid).once('value', (snapshot) => {
        email = snapshot.val().email;
        nom = snapshot.val().nom;
        prenom = snapshot.val().prenom;
      });
    return [email, nom, prenom];
  }

}

